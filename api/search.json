[{"id":"fe7a1f29f308686faf2c7367fba7f77e","title":"性能需求分析与评估","content":"","slug":"性能需求分析与评估","date":"2022-01-25T08:40:35.000Z","categories_index":"性能","tags_index":"需求分析,测试分析","author_index":"Shepard"},{"id":"d4b768a04b252f8943cc40ff24e9a3ba","title":"测试需求分析","content":"测试分析思路：首先梳理出主干流程-&gt;然后梳理流程中所有可能的路径\n1、首先梳理出主干流程主谓宾\n2、然后梳理流程中所有可能的路径关注的点：\n2-1、对于状态流转：不同角色\n不同操作\n不同状态变化规则\n是否按照以上三点进行拆分，比如不同的角色是否会影响规则，如果有影响，则拆分为多个流程\n2-2、对于流程的起点，终点，节点：数据从哪里来，到哪里去，节点如何处理输入的数据（这里不是指技术上的处理，指的是业务上的）\n是否依赖第三方\n各个节点/依赖方的状态变化时，规则如何处理\n2-3、从用户、业务的角度思考用户角度：\n行为的合理性\n易用性\n页面布局 配色\n业务角度：\n流程的合理性、流畅性、完整性（流程有没有闭环，有没有缺失的场景）\n2-4、非功能性需求安全\n性能\n","slug":"测试需求分析","date":"2022-01-25T08:34:37.000Z","categories_index":"软件测试","tags_index":"需求分析,测试分析","author_index":"Shepard"},{"id":"7c96820221324ccf244ace14cfe9ee43","title":"JMeter源码分析（三）JMeter的多线程模式","content":"","slug":"JMeter源码分析（三）JMeter的多线程模式","date":"2022-01-25T08:23:53.000Z","categories_index":"性能","tags_index":"JMeter,源码","author_index":"Shepard"},{"id":"c8391535c2748168c796926b77908e3d","title":"JMeter源码分析（二）JMeter的协议和Sampler","content":"JMeter源码分析（二）JMeter的协议和Sampler","slug":"JMeter源码分析（二）JMeter的协议和Sampler","date":"2022-01-25T08:22:53.000Z","categories_index":"性能","tags_index":"JMeter,源码","author_index":"Shepard"},{"id":"d1c22133881201ef28276da04c4f4520","title":"JMeter源码分析（一）JMeter的架构","content":"","slug":"JMeter源码分析（一）JMeter的架构","date":"2022-01-25T04:33:57.000Z","categories_index":"性能","tags_index":"JMeter,源码","author_index":"Shepard"},{"id":"118f149cd8b46dd25f6defc2189d56a1","title":"Linux监控指标","content":"Linux监控指标\n工具使用1、lscpu","slug":"Linux监控指标","date":"2022-01-25T04:33:57.000Z","categories_index":"Linux","tags_index":"Linux","author_index":"Shepard"},{"id":"27744e614f7ee333f0c3a9e11c89d431","title":"日常Linux操作总结","content":"Linux基础信息查看包括：\n\n1、查看Linux的版本、cpu、内存、磁盘等信息\n\n2、查看磁盘占用，找到大文件\n\n3、查找文件和目录\n\n4、crontab定时任务\n\n5、常见环境配置：防火墙、免登陆、yum、时间、JDK等\n\n\n日志处理包括：\n\n1、日志文件切割与批处理\n\n2、日志内容筛选与编辑\n\n3、正则匹配，命令行高亮显示\n\n\n使用到的命令：split cat grep awk sed\n日志文件快捷命令编写shell函数的sh文件，将路径放在当前shell的环境变量下，即可在命令行中通过命令的形式调用函数\n","slug":"日常Linux使用总结","date":"2022-01-25T04:33:57.000Z","categories_index":"Linux","tags_index":"Linux,Shell","author_index":"Shepard"},{"id":"224bc71bb6fcb80309744682916f3702","title":"接口测试（一）聊聊接口测试","content":"接口测试是个讨论度和普及度很高的话题了，只要身处这个行业，无论了解到什么程度，都能聊几句接口测试。不过即便如此，接口作为面向对象领域的重要实现，仍然有举足轻重的地位，本系列的第一个话题打算从接口开始。\n\n首先从看过无数次的Test Pyramid开始\n  \n 从下至上，测试粒度越来越粗，关联的服务越来越多，链路越来越长，定位问题耗时越来越多，发现问题修改的成本越来越高\n 对于国内中小企业的测试人员来说，接口测试是性价比最高的选择，单元测试虽然理论上发现问题的成本更低，但是相对地对开发人员的负担也会升高，以Java为例，常用的单元测试框架JUnit实现的测试代码与业务代码的比例接近3：1，在业务重，开发资源紧张的时候推进单元测试，显然不合适，而且想要单元测试的效果达到预期，要具备几个前提条件：\n首先，目标要清晰\n不少人认为单元测试无用的依据是，和后面的功能测试、接口测试重复，没有价值；这就要回到了测试金字塔了，尽管接口的粒度相比集成测试已经细了一些，但是\n其次，测试用例的设计要过关\n测试人员需要写出合格的测试用例（分支覆盖度足够，可读性强）并提供给开发作为单元测试用例的依据，这样开发才能够快速写出足够覆盖度的单元测试case；\n最后，想办法降低编写单元测试的成本\n不影响业务进度的同时，减少开发人员的抵触心理；\n测试开发可以调研一些效率更高的单元测试框架，或者开发一些效率工具供开发使用，降低编写成本；同时搭建和维护代码覆盖率的环境供开发使用，这也是测试左移的一部分\n当然这个还是要看实际情况，如果开发已经在持续加班做业务了，想推单元测试就变得很困难\n 尽管敏捷测试、精准测试逐渐兴起，上面的经典模型仍然能够给大多数测试行为提供参考。常见流程下的测试活动大体可以分为以下几种：\n\n 接口测试涵盖服务测试中的单接口测试和端到端中的接口流程测试，功能、性能、安全测试三者都不同程度穿插着对接口的测试。\n接口测试怎么做从用例设计、数据管理、框架三个方面来看看接口测试是怎么搞的\n1、用例设计2、数据管理3、框架","slug":"接口测试（一）聊聊接口测试","date":"2022-01-20T10:49:36.000Z","categories_index":"测试开发","tags_index":"接口测试","author_index":"Shepard"}]